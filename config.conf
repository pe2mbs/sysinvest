collector:
    modules:
    -   report.email
    -   report.html
    -   report.jira
    groups:
    -   admin
    -   power-users
    thresholds:
        messages:               5
        time:                   300
    forward:
    # -   email
    -   html
#    -   jira
    html:
        template:               ./template_index.html
        location:               ./index.html
        interval:               60

    smtp:
        host:               mail.pe2mbs.nl
        username:           monitor@pe2mbs.nl
        secure:             true
        keyfile:            null
        certfile:           null
        password:           verysecret
        sender:             monitor@pe2mbs.nl

    rest:
        host:               pe2mbs.nl
        uri:                api/sendmail
        method:             POST
        json:
            username:       mbertens
            password:       verysecret
            sender:         monitor@pe2mbs.nl
            addressee:      ${ groups[ group ] }
            message:        ${ message }

    datadase:
        host:               database.pe2mbs.nl
        engine:             mysql
        username:           mbertens
        password:           verysecret
        schema:             MAIN
        table:              MS_OUTBOX
        fields:
            OB_MESSAGE:     ${ message }
            OB_SENDER:      monitor@pe2mbs.nl
            OB_ADDRESSES:   ${ groups[ group ] }
    jira:
        project:
            host:           jira.pe2mbs.nl
            username:       monitor
            password:       verysecret
            project:        Monitor Infra
            issue:          Task
            assignee:       1st line support
            description:    ${ message }
#
#   Helper for 'cron' attribute
#   https://cron.help/
#
objects:
-   name:                       I am alive
    # Every 24 hours at 00:00
    cron:                       0 0 * * *
    module:                     monitor.iamalive
    priority:                   true
    group:                      admin
    template: >
        SysInvest infrastructure monitor daemon is alive, running since ${since}\n
        Uptime ${uptime} with no. ${passes} passes, checking ${tasks} tasks
-   name:                       Check server loads
    module:                     monitor.serverloads
    # Every 1 minutes, this is just for starting it as the Plugin will run always from point ists started
    # This deals with monitoring the system.
    # When it failes it shall be restarted again.
    cron:                       '*/1 * * * *'
-   name:                       file exists backup-database.sql not older than 24 hours
    module:                     monitor.fileexists
    # Every 5 minutes
    cron:                       '*/1 * * * *'
    group:                      admin
    attributes:
        filename:               /var/backup/backup-database.sql
        expire:                 24:00:00
        minimal_size:           110240000
    template_: >
        %if expired and exists:\n
        The database file ${filename} is too old ${ datetime.fromtimestamp( ctime ).strftime( "%Y-%m-%d %H:%M:%S" ) }\n
        Must be less than 24 hours.\n
        %elif exists:\n
        The database file ${filename} exist with access '${mode}' and is valid. and has size ${size} bytes\n
        %else:\n
        The database file ${filename} doesn t exist.\n
        %endif\n
extras:
-   name:                       Check PID of SSH daemon
    module:                     monitor.checkpid
    # Every hour on minute xx:00
    cron:                       0 * * * *
    group:                      admin
    attributes:
        filename:               /run/sshd.pid
    template: >
        ${name}, file ${filename} failed\n
        ${message}
-   name:                       file exists acpid.socket
    module:                     monitor.fileexists
    cron:                       '*/5 * * * *'
    group:                      admin
    attributes:
        filename:               /run/acpid.socket
        template:               The ACPID socket ${filename} doesn t exists.
-   name:                       Check if 'marco' exists
    module:                     monitor.checkprocess
    # Every 5 minutes
    cron:                       '*/5 * * * *'
    group:                      admin
    template_file:              template/marco.mako
    attributes:
        name:                   marco
        pidfile:                /run/sshd.pid
        cmdline:
        -   '--composite'
        -   '--replace'
        info:
        -   pid
        -   name
        -   create_time
        -   username
        thresholds:
            memory_percent:     5
            cpu_percent:        5
# -   name:                       Check MySql/MariaDb connection
#     module:                     monitor.mysql
#     # Every hour on minute 0
#     cron:                       0 * * * *
#     group:                      admin
#     attributes:
#         host:                   localhost
#         user:                   root
#         password:               password
#         database:               test
#         query: >
#             SELECT first_name, last_name, hire_date FROM employees WHERE hire_date\n
#             BETWEEN '${dateime.dateime.now() - dateime.dateime.timedelta(days = 10}' AND '${dateime.dateime.now()}'
#         reccount:               1
#         parameters:
#             test: 1
-   name:                       Check REDIS serer
    module:                     monitor.redis
    url:                        redis://{username}:{password]}@localhost:6379/0
    # Every 30 minutes
    cron:                       '*/30 * * * *'
    group:                      admin
    attributes:
        host:                   localhost
        user:                   root
        password:               password
        token:                  ${ uuid.UUID() }
        type:                   rdwr
        value:                  Check REDIS serer

-   name:                       Check REDIS serer
    module:                     monitor.redis
    # Every 30 minutes
    cron:                       '*/30 * * * *'
    group:                      admin
    attributes:
        host:                   localhost
        user:                   root
        password:               password
        token:                  ${ uuid.UUID() }
        type:                   counter

-   name:                       Check HTTP Server
    module:                     monitor.http
    # Every 6 minutes
    cron:                       '*/5 * * * *'
    attributes:
        url:                    http://localhost/
        method:                 GET
        status_code:            200
        parameters:
            timeout:            5

-   name:                       Check HTTPS Server
    module:                     monitor.https
    # Every 6 minutes
    cron:                       '*/5 * * * *'
    attributes:
        url:                    https://localhost/
        method:                 GET
        status_code:            200
        parameters:
            timeout:            5
logging:
    version: 1
    formatters:
        short:
            format: '%(message)s'
        brief:
            format: '%(asctime)s %(levelname)-8s "%(name)-25s" %(message)s'
            datefmt: '%Y-%m-%d %H:%M:%S'
        precise:
            format: '%(asctime)s %(levelname)-8s %(name)-15s %(message)s'
            datefmt: '%Y-%m-%d %H:%M:%S'
    handlers:
        sender:
            class : logging.StreamHandler
            formatter: short
            level   : INFO
            stream  : ext://sys.stdout
        console:
            class : logging.StreamHandler
            formatter: brief
            level   : INFO
            stream  : ext://sys.stdout
        file:
            class : logging.handlers.RotatingFileHandler
            formatter: precise
            filename: logconfig.log
            maxBytes: 10240000
            backupCount: 3
    loggers:
        monitor:
            level: INFO
            handlers:
            -   console
            -   file
        result:
            level: INFO
            handlers:
            -   console
            -   file
        collector:
            level: INFO
            handlers:
            -   console
            -   file
        plugin:
            level: INFO
            handlers:
            -   console
            -   file
        tasks.short:
            level: INFO
            handlers:
            -   console
            -   file
        sender:
            level: INFO
            handlers:
            -   sender
        html:
            level: INFO
            handlers:
            -   console
            -   file
